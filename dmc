#!/usr/bin/env bash
#
# Yamada Hayao
# Twitter: @Hayao0819
# Email  : hayao@fascode.net
#
# (c) 2019-2021 Fascode Network.
#
# dmc
#
# LICENSE: THE SUSHI-WARE LICENSE
# https://github.com/MakeNowJust/sushi-ware
#
#
# 参考資料
# https://qiita.com/laikuaut/items/4bc07eabce56ee30812d
# https://qiita.com/t_nakayama0714/items/80b4c94de43643f4be51

script_usage(){
    echo "usage: dmc [options] [command]"
    echo
    echo "A simple tool for switching LightDM Greeters"
    echo
    echo " LightDM command:"
    echo "    autologin [username] [session]    Set up automatic login (with blank username to disable)"
    echo "    greeter                           Run greeter setup wizard"
    echo "    greeter-create [file]             Set the specified executable file as Greeter"
    echo "    greeter-change [greeter]          Specify the greeter to use"
    echo "    greeter-edit [greeter]            Edit the greeter configs"
    echo "    greeter-list                      Show a list of currently installed Greeters"
    echo "    remove                            Removes all changes made by this command"
    echo "    edit                              Edit lightdm config"
    echo "    show-config                       Show current settings"
    echo
    echo " General option:"
    echo "    -d | --display-manager            Specifiy the display manager"
    echo "    -e | --editer                     Specifiy the editor to use for editing"
    echo "    -h | --help                       This help message and exit"
    echo "    --comment-replace                 Replace the commented out value."
    echo "    --non-interactive                 Run in non-interactive mode"
    echo "    --noroot                          No check root permission"
    echo
    echo " Supported display manager:"
    echo "    lightdm"
    echo
}

set -eu

# エラー
msg_error() {
    echo "${@}" 1>&2
}

# 警告
msg_warn() {
    echo "${@}" 1>&2
}

# rootチェック
check_root(){
    if [[ "${NOROOT}" = false ]] && (( "${UID}" != 0 )); then
        msg_error "You have to run as root"
        exit 1
    fi
}

# 数値チェック
check_int(){
    set +e
    #if (( "$(expr "${1}" + 1 >/dev/null 2>&1; printf "${?}")" < 2 )); then
    if printf "${1}" | grep -E "^[0-9]+$" 1>/dev/null 2>&1; then
        set -e
        return 0
    else
        set -e
        return 1
    fi
}

# 設定ファイルに書き込む
write_config(){
    echo "${@}" >> "${LIGHTDM_CONFIG}"
}

#== LightDM用の汎用関数 ==#
# キーが設定されている設定ファイル
lightdm_get_source_file(){
    local key="${1}"
    local source_name="$(lightdm --show-config 2>&1 | grep -E "^[A-Z]  ${key}=" | cut -d ' ' -f 1)"
    local source_path="$(lightdm --show-config 2>&1 | grep -x -A "$(lightdm --show-config 2>&1 | wc -l)" "Sources:" | grep -xv "Sources" | grep -E "^${source_name}  " | sed "s|^${source_name}  ||g")"
    if [[ -n "${source_path}" ]]; then
        echo -n "${source_path}"
    else
        echo -n ""
    fi
}


# 設定ファイルの値を変更する
lightdm_set_config(){
    local key="${1}" value="${2}"
    if [[ "${COMMENT_REPLACE}" = true ]]; then
        if cat "${LIGHTDM_CONFIG}" | grep -E "^#? ?${key} ?=" > /dev/null; then
            sed -i -r "s|^# ?${key} ?=.+|${key}=${value}|g" "${LIGHTDM_CONFIG}"
        fi
    fi

    if cat "${LIGHTDM_CONFIG}" | grep -E "^ ?${key} ?=" > /dev/null; then
        sed -i -r "s|^ ?${key} ?=.+|${key}=${value}|g" "${LIGHTDM_CONFIG}"
    else
        # 新しく設定を追記する
        write_config "${1}=${2}"
    fi

    if [[ ! "$(lightdm_get_value "${1}")" = "${2}" ]]; then
        msg_error "Failed to change the setting value. A value has already been set for $(lightdm_get_source_file "${1}")"
        msg_error "lightdm-config does not manipulate other configuration files for safety. Comment out the settings in that file."
    fi
}

# 設定ファイルのキーを削除する
lightdm_remove_key(){
    local key="${1}" _config
    if cat "${LIGHTDM_CONFIG}" | grep -E "^ ?${key}.+" > /dev/null; then
        sed -i -r "s|^ ?${key} ?=.+||g" "${LIGHTDM_CONFIG}"
        sed -i '/^$/d' "${LIGHTDM_CONFIG}"
    fi
}

# 設定ファイルを作成
lightdm_init_configs(){
    if [[ ! -f "${LIGHTDM_CONFIG}" ]]; then
        mkdir -p "$(dirname "${LIGHTDM_CONFIG}")"
        touch "${LIGHTDM_CONFIG}"
        echo "[Seat:*]" > "${LIGHTDM_CONFIG}"
    fi
}

# 現在設定されている値を取得する
lightdm_get_value(){
    local _current_value="$(lightdm --show-config 2>&1 | grep -E "^[A-Z]  ${1}=" | sed "s|^[A-Z]  ||g" | cut -d "=" -f "2")"
    if [[ "${_current_value}" ]]; then
        echo -n "${_current_value}"
        return 0
    else
        echo -n ""
        return 0
    fi
}

#== LightDM用コマンド ==#
# greeter-changeコマンド
command_lightdm_greeter_change() {
    # 引数チェック
    if [[ -z "${1}" ]]; then
        msg_error "Please specify Greeter."
        script_usage
        exit 1
    fi

    # 指定されたGreeterが正しいか確認
    if ! printf "%s\n" "${GREETERS[@]}" | grep -x "${1}" > /dev/null 2>&2; then
        msg_error "The greeter (${1}) doesn't exist."
        exit 1
    else
        lightdm_set_config "greeter-session" "${1}"
    fi
}

# greeter-createコマンド
command_lightdm_greeter_create(){
    if [[ -z "${1}" ]]; then
        msg_error "Please specify Greeter."
        script_usage
        exit 1
    fi
    if [[ ! -f "${1}" ]]; then
        msg_error "${1} does not exist."
        script_usage
        exit 1
    fi
    if [[ ! -x "${1}" ]]; then
        msg_error "hoge is not an executable file."
        script_usage
        exit 1
    fi

    local path="${1}"
    local filename="$(basename "${1}")"

    if [[ -f "/usr/share/xgreeters/${filename}.desktop" ]]; then
        msg_error "Greeter with the same name already exists."
        exit 1
    fi
    cat > "/usr/share/xgreeters/${filename}.desktop"  <<EOF
[Desktop Entry]
Name=LightDM custom Greeter ${filename}
Comment=LightDM Greeter
Exec=${path}
Type=Application
EOF
}

# greeter-listコマンド
command_lightdm_greeter_list() {
    echo "Available Lightdm greeter list:"
    local _greeter
    for _greeter in ${GREETERS[@]}; do
        if [[ "${_greeter}" = "${CURRENT_GREETER}" ]]; then
            echo " * ${_greeter}"
        else
            echo "   ${_greeter}"
        fi
    done
}

# greeterコマンド
run_greeter_wizard(){
    # 質問する
    local _c _greeter
    echo "Please select the greeter to use."
    for (( _c=1; _c<=${#GREETERS[@]}; _c++)); do
        _greeter="${GREETERS[$(( _c - 1 ))]}"
        if [[ "${_greeter}" = "${CURRENT_GREETER}" ]]; then
            echo " * ${_c}: ${_greeter}"
        else
            echo "   ${_c}: ${_greeter}"
        fi
        unset _greeter
    done
    echo -n "(1 ~ ${#GREETERS[@]}) > "
    read _input

    local _recall
    _recall(){
        echo "Please enter the correct value."
        run_greeter_wizard
        exit 0
    }

    # 回答を解析
    if check_int "${_input}"; then
        # 数字が入力された
        if (( 1 <= _input)) && (( _input <= ${#GREETERS[@]} )); then
            _greeter="${GREETERS[$(( _input - 1 ))]}"
        else
            _recall
        fi
    else
        # 文字が入力された
        if printf "%s\n" "${GREETERS[@]}" | grep -x "${_input}" 1>/dev/null 2>&1; then
            _greeter="${_input}"
        else
            _recall
        fi
    fi

    # 結果に応じて処理を実行
    if [[ -n "${_greeter}" ]]; then
        command_lightdm_greeter_change "${_greeter}"
    else
        run_greeter_wizard
        exit 0
    fi
    echo "Changed greeter to ${_greeter}"
}

# removeコマンド
command_lightdm_remove(){
    if [[ ! -f "${LIGHTDM_CONFIG}" ]]; then
        return 0
    else
        local _yes_or_no
        echo -ne "Are you sure you want to delete all settings?\nThis change is irreversible.\n (y or n) > "
        read -n 1 _yes_or_no
        if [[ "${_yes_or_no}" = "y" ]]; then
            mv "${LIGHTDM_CONFIG}" "${LIGHTDM_CONFIG}.disabled"
        fi
    fi
}

# greeter-edit
command_lightdm_greeter_edit(){
    if [[ "${NON_INTERACTIVE}" = true ]]; then
        msg_error "You cannot use this command in non-interactive mode."
        exit 1
    fi
    local _greeter="${1:-${CURRENT_GREETER}}"
    if [[ -z "${GREETER_CONFIG["${_greeter}"]+SET}" ]]; then
        msg_error "This Greeter is not currently supported."
        msg_error "Please report the problem here."
        msg_error "https://github.com/FascodeNet/lightdm-config/issues"
        exit 1
    else
        if [[ -z ${1} ]]; then
            msg_warn "Greeter was not specified. Open the currently configured Greeter configuration file."
            echo -n "(Enter to continue) > "
            read
        fi
        set -u
        bash -c "${USE_EDITOR} ${GREETER_CONFIG["${_greeter}"]}"
        exit
    fi
}

# edit
command_lightdm_edit(){
    if [[ "${NON_INTERACTIVE}" = true ]]; then
        msg_error "You cannot use this command in non-interactive mode."
        exit 1
    fi
    for _config in "${LOADED_LIGHTDM_CONFIG[@]}"; do
        echo -ne "Edit ${_config} ? (y or n)> "
        read -n 1 _yes_or_no
        echo
        if [[ "${_yes_or_no}" = "y" ]]; then
            bash -c "${USE_EDITOR} ${_config}"
        fi
    done
}

# autologin
command_lightdm_auto_login(){
    if [[ -z "${1+SET}" ]]; then
        # 既に自動ログインが設定されているかを確認
        local autologin_user="$(lightdm_get_value autologin-user)"
        if [[ -n "${autologin_user}" ]]; then
        # autologinを無効化
        for _autologin in "autologin-guest" "autologin-user" "autologin-user-timeout" "autologin-in-background" "autologin-session"; do
            remove_key "${_autologin}"
        done
        echo "Canceled automatic login of ${autologin_user}"
        fi
    else
        local autologin_user="${1}" autologin_session
        if [[ -v 2 ]]; then
            autologin_session="${2}"
        fi

        # ユーザーチェック
        if ! getent passwd "${autologin_user}" 1> /dev/null 2>&1; then
            echo "${autologin_user} is a non-existent user."
            exit 1
        fi

        # セッションを設定
        if [[ -z "${autologin_session+SET}" ]]; then
            if (( $(ls "/usr/share/xsessions" 2> /dev/null | wc -l) <= 1 )); then
                autologin_session="$(ls "/usr/share/xsessions" | sed 's|.desktop$||g')"
            elif [[ "${NON_INTERACTIVE}" = true ]]; then
                # 非対話モード
                # ~/.dmrcの値を設定します
                autologin_session="$(cat "${HOME}/.dmrc" | grep -E '^Session=' | cut -d '=' -f 2)"
                if [[ -z "${autologin_session}" ]]; then
                    msg_error "Failed to set the session."
                    msg_error "Not specified and ~/.dmrc does not exist either."
                    exit 1
                fi
            else
                echo "Select the desktop session to autologin"
                local session
                for session in "/usr/share/xsessions/"*; do
                    echo "   ${session}"
                done
                echo -n "(session name) > "
                read session
                if [[ -f "/usr/share/xsessions/${session}.desktop" ]]; then
                    autologin_session="${session}"
                else
                    msg_error "Please enter the correct session name."
                    exit 1
                fi
            fi
        else
            # 既に値が設定済み
            if [[ ! -f "/usr/share/xsessions/${autologin_session}.desktop" ]]; then
                # 存在しないセッションが指定された場合
                msg_error "This is a session (${autologin_session}) that does not exist."
                exit 1
            fi
        fi

        # autologin グループを設定
        if ! getent group "autologin" 1> /dev/null 2>&1; then
            LANG=C groupadd -r "autologin"
        fi
        LANG=C gpasswd -a "${autologin_user}" "autologin"

        # 設定を書き込み
        lightdm_set_config "autologin-guest" "false"
        lightdm_set_config "autologin-user" "${autologin_user}"
        lightdm_set_config "autologin-user-timeout" "0"
        lightdm_set_config "autologin-in-background" "false"
        lightdm_set_config "autologin-session" "${autologin_session}"

        echo "${autologin_user} will automatically log in with ${autologin_session}"
    fi

}

# show-config
command_lightdm_show_config(){
   lightdm --show-config 2>&1 
}

#== GDM用の汎用関数 ==#
gdm_init_configs(){
    if [[ ! -f "/etc/dconf/profile/gdm" ]]; then
        mkdir -p "/etc/dconf/profile"
        touch "/etc/dconf/profile/gdm"
        echo -e "user-db:user\nsystem-db:gdm\nfile-db:/usr/share/gdm/greeter-dconf-defaults" > "/etc/dconf/profile/gdm"
    fi
    if [[ ! -f "${DISPLAY_MANAGER_CONFIG["gdm"]}" ]]; then
        mkdir -p "$(dirname "${DISPLAY_MANAGER_CONFIG["gdm"]}")"
        touch "${DISPLAY_MANAGER_CONFIG["gdm"]}"
    fi
}

# gdm_set_config <dconf path> <key> <value>
gdm_set_config(){
    local _path="${1}" _key="${2}" _value="${3}"
    echo -e "[${_path}]\n${_key}='$_value'" >> "${DISPLAY_MANAGER_CONFIG["gdm"]}"
    gdm_update
}

gdm_update(){
    dconf update
}


#== GDM用コマンド ==#
command_gdm_cursor_wizard(){
    # カーソルテーマの一覧を取得
    # 参考: https://wiki.archlinux.jp/index.php/%E3%82%AB%E3%83%BC%E3%82%BD%E3%83%AB%E3%83%86%E3%83%BC%E3%83%9E
    # 参考: https://wiki.archlinux.jp/index.php/GDM
    local _dir _cursor_theme_dir_list _find_cursor_dir_list=("/usr/share/icons" "${HOME}/.local/share/icons" "${HOME}/.icons")
    for _dir in ${_find_cursor_dir_list[@]}; do
        if [[ -d "${_dir}" ]]; then
            _cursor_theme_dir_list=($(find "${_dir}" -type d -name "cursors" | xargs -i dirname {} | sort))
        fi
    done
    
    local _cursor_theme _cursor_theme_name _temp
    for _cursor_theme in ${_cursor_theme_dir_list[@]}; do
        _temp+=("$(cat "${_cursor_theme}/cursor.theme" 2> /dev/null | grep -E "^Name=" | sed "s|^Name=||g")")
        if [[ -z "${_temp}" ]]; then
            _cursor_theme_name+=("$(basename "${_cursor_theme}")")
        fi
    done

    # 一覧を生成
    local _c
    unset _cursor_theme
    echo "Please select the cursor theme to use."
    for (( _c=1; _c<=${#_cursor_theme_name[@]}; _c++)); do
        _cursor_theme="${_cursor_theme_name[$(( _c - 1 ))]}"
        echo "   ${_c}: ${_cursor_theme}"
        unset _cursor_theme
    done

    # 質問する
    local _input
    echo -n "(1 ~ ${#_cursor_theme_name[@]}) > "
    read -n 1 _input
    echo
    if [[ -z "${_input+SET}" ]] || ! printf "${_input}" | grep -E "^[0-9]+$" >/dev/null 2>&1 || ! (( 1 <= _input <= ${#_cursor_theme_name[@]} )); then # 正しい値か確認
        echo "Please enter the correct value."
        exit 1
    fi
    _cursor_theme="${_cursor_theme_name[$(( _input - 1 ))]}"
    if [[ -n "${_cursor_theme}" ]]; then
        gdm_set_config "org/gnome/desktop/interface" "cursor-theme" "${_cursor_theme}"
    else
        command_gdm_cursor_wizard
        exit 0
    fi
    echo "Changed cursor to ${_cursor_theme}"
}

# 変数を設定
declare -A GREETER_CONFIG=(
    ["lightdm-webkit2-greeter"]="/etc/lightdm/lightdm-webkit2-greeter.conf"
    ["lightdm-slick-greeter"]="/etc/lightdm/slick-greeter.conf"
    ["lightdm-gtk-greeter"]="/etc/lightdm/lightdm-gtk-greeter.conf"
    ["io.elementary.greeter"]="/etc/lightdm/io.elementary.greeter.conf"
    ["lightdm-mini-greeter"]="/etc/lightdm/lightdm-mini-greeter.conf"
)

declare -A DISPLAY_MANAGER_CONFIG=(
    ["lightdm"]="/etc/lightdm/lightdm.conf.d/00-dmc-lightdm.conf"
    ["gdm"]="/etc/dconf/db/gdm.d/00-dmc-gdm"
)

USE_EDITOR="${EDITOR:-vi}"
DISPLAY_MANAGER="lightdm"
LIGHTDM_CONFIG="${DISPLAY_MANAGER_CONFIG["lightdm"]}"
COMMENT_REPLACE=false
NON_INTERACTIVE=false
NOROOT=false
GREETERS_DIR="$(lightdm_get_value "greeters-directory")"
: ${GREETERS_DIR:="/usr/share/xgreeters"} # デフォルト値を設定
GREETERS=($(ls "${GREETERS_DIR}" | sed "s|.desktop$||g"))
CURRENT_GREETER="$(lightdm --show-config 2>&1 | grep "greeter-session" | cut -d "=" -f 2)"
: ${CURRENT_GREETER:="lightdm-gtk-greeter"}
LOADED_LIGHTDM_CONFIG=(
    $(
        printf "%s\n" $(
        lightdm --show-config 2>&1 | \
            grep -x -A "$(lightdm --show-config 2>&1 | wc -l)" "Sources:" | \
            grep -v "Sources") | \
            sed -E "s|^[A-Z]$||g"
    )
)

# 引数を解析
ARGUMENT="${@}"
OPTS="d:e:h"
OPTL="display-manager:,editor:,help,comment-replace,non-interactive,noroot"
OPT="$(getopt -o ${OPTS} -l ${OPTL} -- ${ARGUMENT})"
(( ${?} != 0 )) && exit 1

eval set -- "${OPT}"
unset OPT OPTS OPTL

while true; do
    case "${1}" in
        -d | --display-manager)
            DISPLAY_MANAGER="${2}"
            shift 2
            ;;
        -e | --editor)
            USE_EDITOR="${2}"
            shift 2
            ;;
        -h | --help)
            script_usage
            exit 0
            ;;
        --comment-replace)
            COMMENT_REPLACE=true
            shift 1
            ;;
        --non-interactive)
            NON_INTERACTIVE=true
            shift 1
            ;;
        --noroot)
            NOROOT=true
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
    esac
done

COMMAND="${1:-null}"
if (( "${#}" >= 1 )); then
    shift 1
fi
COMMAND_ARGS="${@}"
: ${COMMAND_ARGS-""} # サブコマンドの引数が何も指定されなかった場合に空文字を代入

case "${DISPLAY_MANAGER}" in
    "lightdm")
        case "${COMMAND}" in
            "autologin")
                lightdm_init_configs
                check_root
                command_lightdm_auto_login ${COMMAND_ARGS}
                ;;
            "greeter")
                lightdm_init_configs
                check_root
                run_greeter_wizard
                ;;
            "greeter-change")
                lightdm_init_configs
                check_root
                command_lightdm_greeter_change ${COMMAND_ARGS}
                ;;
            "greeter-create")
                lightdm_init_configs
                check_root
                command_lightdm_greeter_create ${COMMAND_ARGS}
                ;;
            "greeter-list")
                command_lightdm_greeter_list
                ;;
            "greeter-edit")
                check_root
                command_lightdm_greeter_edit ${COMMAND_ARGS}
                ;;
            "remove")
                check_root
                command_lightdm_remove
                ;;
            "edit")
                check_root
                command_lightdm_edit
                ;;
            "show-config")
                command_lightdm_show_config
                ;;
            "null")
                script_usage
                exit 1
                ;;
            *)
                msg_error "Undefined commnad(${COMMAND})"
                ;;
        esac
        ;;
    "gdm")
        case "${COMMAND}" in
            "cursor")
                check_root
                gdm_init_configs
                command_gdm_cursor_wizard
                ;;
            *)
                msg_error "Undefined commnad(${COMMAND})"
                ;;
        esac
        ;;
    *)
        msg_error "A display manager that is not currently supported."
        exit 1
        ;;
esac
exit 0
