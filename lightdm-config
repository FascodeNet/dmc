#!/usr/bin/env bash
#
# Yamada Hayao
# Twitter: @Hayao0819
# Email  : hayao@fascode.net
#
# (c) 2019-2021 Fascode Network.
#
# lightdm-config - A simple tool for editing LightDM
#
# LICENSE: THE SUSHI-WARE LICENSE
# https://github.com/MakeNowJust/sushi-ware
#

declare -A GREETER_CONFIG=(
    ["lightdm-webkit2-greeter"]="/etc/lightdm/lightdm-webkit2-greeter.conf"
    ["lightdm-slick-greeter"]="/etc/lightdm/slick-greeter.conf"
    ["lightdm-gtk-greeter"]="/etc/lightdm/lightdm-gtk-greeter.conf"
    ["io.elementary.greeter"]="/etc/lightdm/io.elementary.greeter.conf"
    ["lightdm-mini-greeter"]="/etc/lightdm/lightdm-mini-greeter.conf"
)

USE_EDITOR="vi"
COMMAND="null"
LIGHTDM_CONFIG="/etc/lightdm/lightdm.conf.d/00-lightdm-config-command.conf"
COMMENT_REPLACE=false
GREETERS=($(ls "/usr/share/xgreeters" | sed "s|.desktop$||g"))
CURRENT_GREETER="$(lightdm --show-config 2>&1 | grep "greeter-session" | cut -d "=" -f 2)"
LOADED_LIGHTDM_CONFIG=(
    $(
        printf "%s\n" $(
        lightdm --show-config 2>&1 | \
            grep -x -A "$(lightdm --show-config 2>&1 | wc -l)" "Sources:" | \
            grep -v "Sources") | \
            sed -E "s|^[A-Z]$||g"
    )
)

script_usage(){
    echo "usage lightdm-greeter [options] [command]"
    echo
    echo "A simple tool for switching LightDM Greeters"
    echo
    echo " General command:"
    echo "    autologin [username]           Set up automatic login (with blank username to disable)"
    echo "    greeter                        Run greeter setup wizard"
    echo "    greeter-create [file]          Set the specified executable file as Greeter"
    echo "    greeter-change [greeter]       Specify the greeter to use"
    echo "    greeter-edit [greeter]         Edit the greeter configs"
    echo "    greeter-list                   Shows a list of currently installed Greeters"
    echo "    remove                         Removes all changes made by this command"
    echo "    edit                           Edit lightdm config"
    echo
    echo " General option:"
    echo "    -e | --editer                  Specifies the editor to use for editing"
    echo "    -h | --help                    This help message and exit"
    echo "    --comment-replace"
}

set -e

# エディタを設定
if [[ -v EDITOR ]]; then
    USE_EDITOR="${EDITOR}"
fi


# エラー
msg_error() {
    echo "${@}" 1>&2
}

# 警告
msg_warn() {
    echo "${@}" 1>&2
}

# 設定ファイルに書き込む
write_config(){
    echo "${@}" >> "${LIGHTDM_CONFIG}"
}

# キーが設定されている設定ファイル
get_source_file(){
    local key="${1}"
    local source_name="$(lightdm --show-config 2>&1 | grep -E "^[A-Z]  ${key}=" | cut -d ' ' -f 1)"
    local source_path="$(lightdm --show-config 2>&1 | grep -x -A "$(lightdm --show-config 2>&1 | wc -l)" "Sources:" | grep -xv "Sources" | grep -E "^${source_name}  " | sed "s|^${source_name}  ||g")"
    if [[ -n "${source_path}" ]]; then
        echo -n "${source_path}"
    else
        echo -n ""
    fi
}


# 設定ファイルの値を変更する
set_config(){
    local key="${1}" value="${2}"
    if [[ "${COMMENT_REPLACE}" = true ]]; then
        if cat "${LIGHTDM_CONFIG}" | grep -E "^#? ?${key} ?=" > /dev/null; then
            sed -i -r "s|^# ?${key} ?=.+|${key}=${value}|g" "${LIGHTDM_CONFIG}"
        fi
    fi

    if cat "${LIGHTDM_CONFIG}" | grep -E "^ ?${key} ?=" > /dev/null; then
        sed -i -r "s|^ ?${key} ?=.+|${key}=${value}|g" "${LIGHTDM_CONFIG}"
    else
        # 新しく設定を追記する
        write_config "${1}=${2}"
    fi

    if [[ ! "$(get_value "${1}")" = "${2}" ]]; then
        msg_error "Failed to change the setting value. A value has already been set for $(get_source_file "${1}")"
        msg_error "lightdm-config does not manipulate other configuration files for safety. Comment out the settings in that file."
    fi
}

# 設定ファイルのキーを削除する
remove_key(){
    local key="${1}" _config
    if cat "${LIGHTDM_CONFIG}" | grep -E "^ ?${key}.+" > /dev/null; then
        sed -i -r "s|^ ?${key} ?=.+||g" "${LIGHTDM_CONFIG}"
        sed -i '/^$/d' "${LIGHTDM_CONFIG}"
    fi
}

# 設定ファイルを作成
init_configs(){
    if [[ ! -f "${LIGHTDM_CONFIG}" ]]; then
        mkdir -p "$(dirname "${LIGHTDM_CONFIG}")"
        touch "${LIGHTDM_CONFIG}"
        echo "[Seat:*]" > "${LIGHTDM_CONFIG}"
    fi
}

# 現在設定されている値を取得する
get_value(){
    local _current_value="$(lightdm --show-config 2>&1 | grep -E "^[A-Z]  ${1}=" | sed "s|^[A-Z]  ||g" | cut -d "=" -f "2")"
    if [[ "${_current_value}" ]]; then
        echo -n "${_current_value}"
        return 0
    else
        echo -n ""
        return 0
    fi
}

# greeter-changeコマンド
run_greeter_change() {
    # 引数チェック
    if [[ -z "${1}" ]]; then
        msg_error "Please specify Greeter."
        script_usage
        exit 1
    fi

    # 指定されたGreeterが正しいか確認
    if ! printf "%s\n" "${GREETERS[@]}" | grep -x "${1}" > /dev/null 2>&2; then
        msg_error "The greeter (${1}) doesn't exist."
        exit 1
    else
        set_config "greeter-session" "${1}"
    fi
}

# greeter-createコマンド
run_greeter_create(){
    if [[ -z "${1}" ]]; then
        msg_error "Please specify Greeter."
        script_usage
        exit 1
    fi
    if [[ ! -f "${1}" ]]; then
        msg_error "${1} does not exist."
        script_usage
        exit 1
    fi
    if [[ ! -x "${1}" ]]; then
        msg_error "hoge is not an executable file."
        script_usage
        exit 1
    fi

    local path="${1}"
    local filename="$(basename "${1}")"

    if [[ -f "/usr/share/xgreeters/${filename}.desktop" ]]; then
        msg_error "Greeter with the same name already exists."
        exit 1
    fi
    cat > "/usr/share/xgreeters/${filename}.desktop"  <<EOF
[Desktop Entry]
Name=LightDM custom Greeter ${filename}
Comment=LightDM Greeter
Exec=${path}
Type=Application
EOF
}

# greeter-listコマンド
run_greeter_list() {
    echo "Available Lightdm greeter list:"
    local _greeter
    for _greeter in ${GREETERS[@]}; do
        if [[ "${_greeter}" = "${CURRENT_GREETER}" ]]; then
            echo " * ${_greeter}"
        else
            echo "   ${_greeter}"
        fi
    done
}

# greeterコマンド
run_greeter_wizard(){
    local _c _greeter
    echo "Please select the greeter to use."
    for (( _c=1; _c<=${#GREETERS[@]}; _c++)); do
        _greeter="${GREETERS[$(( _c - 1 ))]}"
        if [[ "${_greeter}" = "${CURRENT_GREETER}" ]]; then
            echo " * ${_c}: ${_greeter}"
        else
            echo "   ${_c}: ${_greeter}"
        fi
        unset _greeter
    done
    echo -n "(0 ~ ${#GREETERS[@]}) > "
    read -n 1 _input
    echo
    _greeter="${GREETERS[$(( _input - 1 ))]}"
    if [[ -n "${_greeter}" ]]; then
        run_greeter_change "${_greeter}"
    else
        run_greeter_wizard
        exit 0
    fi
    echo "Changed greeter to ${_greeter}"
}

# removeコマンド
run_remove(){
    if [[ ! -f "${LIGHTDM_CONFIG}" ]]; then
        return 0
    else
        local _yes_or_no
        echo -ne "Are you sure you want to delete all settings?\nThis change is irreversible.\n (y or n) > "
        read -n 1 _yes_or_no
        if [[ "${_yes_or_no}" = "y" ]]; then
            mv "${LIGHTDM_CONFIG}" "${LIGHTDM_CONFIG}.disabled"
        fi
    fi
}

# greeter-edit
run_greeter_edit(){
    local _greeter
    if [[ -z "${1}" ]]; then
        msg_warn "Greeter was not specified. Open the currently configured Greeter configuration file."
        echo -n "(Enter to continue) > "
        read
        echo
        _greeter="${CURRENT_GREETER}"
    else
        _greeter="${1}"
    fi
    if [[ -z "${GREETER_CONFIG["${_greeter}"]}" ]]; then
        msg_error "This Greeter is not currently supported."
        msg_error "Please report the problem here."
        msg_error "https://github.com/FascodeNet/lightdm-config/issues"
        exit 1
    else
        bash -c "${USE_EDITOR} ${GREETER_CONFIG["${_greeter}"]}"
        exit
    fi
}

# edit
run_edit(){
    for _config in "${LOADED_LIGHTDM_CONFIG[@]}"; do
        echo -ne "Edit ${_config} ? (y or n)> "
        read -n 1 _yes_or_no
        echo
        if [[ "${_yes_or_no}" = "y" ]]; then
            bash -c "${USE_EDITOR} ${_config}"
        fi
    done
}

# autologin
run_auto_login(){
    if [[ -z "${1}" ]]; then
        # 既に自動ログインが設定されているかを確認
        local autologin_user="$(get_value autologin-user)"
            if [[ -n "${autologin_user}" ]]; then
            # autologinを無効化
            for _autologin in "autologin-guest" "autologin-user" "autologin-user-timeout" "autologin-in-background" "autologin-session"; do
                remove_key "${_autologin}"
            done
            echo "Canceled automatic login of ${autologin_user}"
        fi
    else
        local autologin_session
        local autologin_user="${1}"

        # ユーザーチェック
        if ! getent passwd "${autologin_user}" 1> /dev/null 2>&1; then
            echo "${autologin_user} is a non-existent user."
            exit 1
        fi

        # セッションを設定
        if (( $(ls "/usr/share/xsessions" 2> /dev/null | wc -l) <= 1 )); then
            autologin_session="$(ls "/usr/share/xsessions" | sed 's|.desktop$||g')"
        else
            echo "Select the desktop session to autologin"
            local session
            for session in "/usr/share/xsessions/"*; do
                echo "   ${session}"
            done
            echo -n "(session name) > "
            read session
            if [[ -f "/usr/share/xsessions/${session}.desktop" ]]; then
                autologin_session="${session}"
            else
                msg_error "Please enter the correct session name."
                exit 1
            fi
        fi

        # autologin グループを設定
        if ! getent group "autologin" 1> /dev/null 2>&1; then
            groupadd -r "autologin"
        fi
        gpasswd -a "${autologin_user}" "autologin"

        # 設定を書き込み
        set_config "autologin-guest" "false"
        set_config "autologin-user" "${autologin_user}"
        set_config "autologin-user-timeout" "0"
        set_config "autologin-in-background" "false"
        set_config "autologin-session" "${autologin_session}"

        echo "${autologin_user} will automatically log in with ${autologin_session}"
    fi

}

# 引数を解析
ARGUMENT="${@}"
OPTS="eh"
OPTL="editor:,help,comment-replace"
OPT="$(getopt -o ${OPTS} -l ${OPTL} -- ${ARGUMENT})"
(( ${?} != 0 )) && exit 1

eval set -- "${OPT}"
unset OPT OPTS OPTL

while true; do
    case "${1}" in
        -e | --editor)
            USE_EDITOR="${2}"
            shift 2
            ;;
        -h | --help)
            script_usage
            exit 0
            ;;
        --comment-replace)
            COMMENT_REPLACE=true
            shift 1
            ;;
        --)
            shift 1
            break
            ;;
    esac
done

if [[ -z "${1}" ]]; then
    script_usage
    exit 1
fi
COMMAND="${1}"
shift 1

case "${COMMAND}" in
    "autologin")
        init_configs
        run_auto_login "${1}"
        ;;
    "greeter")
        init_configs
        run_greeter_wizard
        ;;
    "greeter-change")
        init_configs
        run_greeter_change "${1}"
        ;;
    "greeter-create")
        init_configs
        run_greeter_create "${1}"
        ;;
    "greeter-list")
        run_greeter_list
        ;;
    "greeter-edit")
        run_greeter_edit
        ;;
    "remove")
        run_remove
        ;;
    "edit")
        run_edit
        ;;
    "null")
        script_usage
        exit 1
        ;;
    *)
        msg_error "Undefined commnad"
        ;;
esac
